pipeline 
{
	agent any
    
//    environment { 
//        JenkinsBase = 'jenkins/test/'
//    }
       
	stages { 
		stage('Initialize') 
		{
			
            
			steps {
				timestamps {
					ansiColor('xterm') {
						
						slackSend (color: '#FFFF00', message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
										
						
						script {
						
							currentBuild.description = "${upstream_build_description} / <a href=\"${git_url_coresoftware}\">coresoftware</a> # ${sha_coresoftware} - ${build_type}" 
							
						}
										
						dir('build')
						{
							deleteDir()
						}	

						dir('coresoftware') {
							deleteDir()
						}
						dir('online_distribution') {
							deleteDir()
						}
						dir('macros')
						{
							deleteDir()
    				}	
						dir('calibrations')
						{
							deleteDir()
    				}	
						dir('tutorials')
						{
							deleteDir()
    				}
					
						sh('hostname')
						sh('pwd')
						sh('env')
						sh('ls -lvhc')

						dir('utilities/jenkins/built-test/') {
							
							sh('/usr/bin/singularity exec -B /var/lib/jenkins/singularity/cvmfs:/cvmfs -B /gpfs -B /direct -B /afs -B /sphenix /var/lib/jenkins/singularity/cvmfs/sphenix.sdcc.bnl.gov/singularity/rhic_sl7_ext.simg tcsh -f singularity-check.sh')
						
						}
					}
				}
			}
		}

		stage('Git Checkout')
		{
			
			steps 
			{
				timestamps { 
					ansiColor('xterm') {
						
						dir('coresoftware') {
							// git credentialsId: 'sPHENIX-bot', url: 'https://github.com/sPHENIX-Collaboration/coresoftware.git'
							
							checkout(
								[
						 			$class: 'GitSCM',
						   		extensions: [               
							   		[$class: 'CleanCheckout'],     
							     	[
							   			$class: 'PreBuildMerge',
							    		options: [
											mergeRemote: 'origin',
							  			mergeTarget: 'master'
							  			]
							    	],
						   		],
							  	branches: [
							    	[name: "${sha_coresoftware}"]
							    ], 
							  	userRemoteConfigs: 
							  	[[
							    	//credentialsId: 'sPHENIX-bot', url: 'https://github.com/sPHENIX-Test/coresoftware.git'
							     	credentialsId: 'sPHENIX-bot', 
							     	url: '${git_url_coresoftware}',
							     	refspec: ('+refs/pull/*:refs/remotes/origin/pr/* +refs/heads/master:refs/remotes/origin/master'), 
							    	branch: ('*')
							  	]]
								] //checkout
							)//checkout
						}
						dir('online_distribution') {
							git credentialsId: 'sPHENIX-bot', url: 'https://github.com/sPHENIX-Collaboration/online_distribution.git'
						}
						//dir('macros')
						//{
						//	git credentialsId: 'sPHENIX-bot', url: 'https://github.com/sPHENIX-Collaboration/macros.git'
    				//}	
						dir('calibrations')
						{
							// git credentialsId: 'sPHENIX-bot', url: 'https://github.com/sPHENIX-Collaboration/calibrations.git'
							
							checkout(
								[
						 			$class: 'GitSCM',
						   		extensions: [               
							   		[$class: 'CleanCheckout'],     
							     	[
							   			$class: 'PreBuildMerge',
							    		options: [
											mergeRemote: 'origin',
							  			mergeTarget: 'master'
							  			]
							    	],
						   		],
							  	branches: [
							    	[name: "${sha_calibrations}"]
							    ], 
							  	userRemoteConfigs: 
							  	[[
							    	//credentialsId: 'sPHENIX-bot', url: 'https://github.com/sPHENIX-Test/coresoftware.git'
							     	credentialsId: 'sPHENIX-bot', 
							     	url: 'https://github.com/sPHENIX-Collaboration/calibrations.git',
							     	refspec: ('+refs/pull/*:refs/remotes/origin/pr/* +refs/heads/master:refs/remotes/origin/master'), 
							    	branch: ('*')
							  	]]
								] //checkout
							)//checkout
							
    				}	
						dir('tutorials')
						{
							git credentialsId: 'sPHENIX-bot', url: 'https://github.com/sPHENIX-Collaboration/tutorials.git'
    				}
					}
				}
			}
		}//stage('SCM Checkout')
		
		// hold this until jenkins supports nested parallel
		//stage('Build')
		//{
		//	parallel {
			
				stage('cpp-check')
				{
					when {
    				// case insensitive regular expression for truthy values
						expression { return run_cppcheck ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/ }
					}
					steps 
					{
		
		    		build(job: 'cpp-check',
		    			parameters:
		    			[
		    				string(name: 'coresoftware_src', value: "${WORKSPACE}/coresoftware"), 
			    			string(name: 'upstream_build_description', value: "${upstream_build_description} / ${env.JOB_NAME}.#${env.BUILD_NUMBER}")
			    		],
		    			wait: false, propagate: false)
		   		}
				}// Stage - cpp check
				 
				
			// hold this until jenkins supports nested parallel 
			//	stage('Build-Test') {
			//		stages{
					    
						stage('sPHENIX-Build')
						{
							
							steps 
							{
								dir('build') {
									deleteDir()
								}
								sh('hostname')
								sh('pwd')
								sh('env')
								sh('ls -lvhc')
										
								sh('/usr/bin/singularity exec -B /var/lib/jenkins/singularity/cvmfs:/cvmfs -B /gpfs -B /direct -B /afs -B /sphenix /var/lib/jenkins/singularity/cvmfs/sphenix.sdcc.bnl.gov/singularity/rhic_sl7_ext.simg tcsh -f utilities/jenkins/built-test/full-build.sh $build_type')
							
							 	script {
							  	build_root_path = pwd();
							 	}
										
								slackSend (color: '#00F000', message: "sPHENIX build available: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}). Buld available at ${build_root_path}")
							}										
						} // 				stage('sPHENIX-Build')
						
						
						stage('Test')
						{
							parallel {
							
								stage('test-default')
								{
									
									when {
				    				// case insensitive regular expression for truthy values
										expression { return run_default_test ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/ }
									}
									steps 
									{
										//sh('/usr/bin/singularity exec -B /var/lib/jenkins/singularity/cvmfs:/cvmfs -B /gpfs -B /direct -B /afs -B /sphenix /var/lib/jenkins/singularity/cvmfs/sphenix.sdcc.bnl.gov/singularity/rhic_sl7_ext.simg tcsh -f utilities/jenkins/built-test/test-default.sh')
												    		
										script
										{
				   						def built = build(job: 'test-default-pipeline',
						    			parameters:
						    			[
							    			string(name: 'build_src', value: "${build_root_path}"), 
							    			string(name: 'sha_macros', value: "${sha_macros}"), 
				    						string(name: 'upstream_build_description', value: "${upstream_build_description} / <a href=\"${env.JOB_URL}\">${env.JOB_NAME}</a>.<a href=\"${env.BUILD_URL}\">#${env.BUILD_NUMBER}</a>")
			    						],
						    			wait: true, propagate: true)
						   										
						   				copyArtifacts(projectName: 'test-default-pipeline', selector: specific("${built.number}"));
										}
						   			
						   			dir('macros/macros/g4simulations/')
						   			{
						   				stash name: "test-default-stash", includes: "*"
						   			}
						   			
						   			dir('test-default-output')
						   			{
						   				unstash "test-default-stash"
						   				archiveArtifacts artifacts: '*', onlyIfSuccessful: true	
						   			}
						   				    
									}				
								}
							
								stage('test-calo-single-qa')
								{
									
									when {
				    				// case insensitive regular expression for truthy values
										expression { return run_calo_qa ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/ }
									}
									steps 
									{
										script
										{
				   						def built = build(job: 'test-calo-single-qa',
							    			parameters:
							    			[
								    			string(name: 'build_src', value: "${build_root_path}"), 
							    				string(name: 'sha_macros', value: "${sha_macros}"), 
				    							string(name: 'upstream_build_description', value: "${upstream_build_description} / <a href=\"${env.JOB_URL}\">${env.JOB_NAME}</a>.<a href=\"${env.BUILD_URL}\">#${env.BUILD_NUMBER}</a>")
			    							],
							    			wait: true, propagate: true)
						   			
						   				copyArtifacts(projectName: 'test-calo-single-qa', selector: specific("${built.number}"));
										}
										archiveArtifacts artifacts: 'qa_page.tar.gz'
										
						    		
										sh('ls -lhv')
						   			
						   			dir('macros/macros/g4simulations/')
						   			{
						   				stash name: "test-calo-single-qa-stash", includes: "*"
						   			}
						   			
						   			dir('test-calo-single-qa-output')
						   			{
						   				unstash "test-calo-single-qa-stash"
						   				archiveArtifacts artifacts: '*', onlyIfSuccessful: true	
						   			}    		   			
						   			
										dir('qa_html')
										{
						    			sh ("tar xzfv ../qa_page.tar.gz")
										}
				
									  publishHTML (target: [
								      allowMissing: false,
								      alwaysLinkToLastBuild: false,
								      keepAll: true,
								      reportDir: 'qa_html',
								      reportFiles: 'index.html',
								      reportName: "Calorimeter QA Report"
								    ])
							   			
									}				
								}// 				stage('test-calo-single-qa')
								
							}// parallel			
						}// stage - Test
		
					//}				//stages("Build-Test")
			//	}				 // stage("Build-Test")
			//} // parallel {
		//}//stage('Build')
		
	}//stages
		
	post {
		always{
			archiveArtifacts artifacts: 'build/${build_type}/rebuild.log'
		}
	
		success {
			slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
		}
		failure {
			slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
		}
		unstable {
			slackSend (color: '#FFF000', message: "UNSTABLE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
		}
	}
	
}//pipeline 

