pipeline 
{
	agent any
    
//    environment { 
//        JenkinsBase = 'jenkins/test/'
//    }
       
	stages { 
		stage('Initialize') 
		{
			agent any
            
			steps {
				timestamps {
					ansiColor('xterm') {
						
						slackSend (color: '#FFFF00', message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
					
						sh('hostname')
						sh('pwd')
						sh('env')
						
						dir('build') {
							deleteDir()
						}
						
						sh('ls -lvhc')
						
						dir('utilities/jenkins/built-test/') {
							
							sh('/usr/bin/singularity exec -B /var/lib/jenkins/singularity/cvmfs:/cvmfs -B /gpfs -B /direct -B /afs -B /sphenix /var/lib/jenkins/singularity/cvmfs/sphenix.sdcc.bnl.gov/singularity/rhic_sl7_ext.simg tcsh -f singularity-check.sh')
						
						}
					}
				}
			}
		}

		stage('Git Checkout')
		{
			agent any
			steps 
			{
				timestamps { 
					ansiColor('xterm') {
						
						dir('coresoftware') {
							git credentialsId: 'sPHENIX-bot', url: 'https://github.com/sPHENIX-Collaboration/coresoftware.git'
						}
						dir('online_distribution') {
							git credentialsId: 'sPHENIX-bot', url: 'https://github.com/sPHENIX-Collaboration/online_distribution.git'
						}
						dir('macros')
						{
							git credentialsId: 'sPHENIX-bot', url: 'https://github.com/sPHENIX-Collaboration/macros.git'
    				}	
						dir('calibrations')
						{
							git credentialsId: 'sPHENIX-bot', url: 'https://github.com/sPHENIX-Collaboration/calibrations.git'
    				}	
						dir('tutorials')
						{
							git credentialsId: 'sPHENIX-bot', url: 'https://github.com/sPHENIX-Collaboration/tutorials.git'
    				}
					}
				}
			}
		}//stage('SCM Checkout')
		
		stage('cpp-check')
		{
			agent any
			steps 
			{

    		build(job: 'cpp-check',
    			parameters:
    			[string(name: 'coresoftware_src', value: "${WORKSPACE}/coresoftware")], 
    			wait: false, propagate: false)
   		}
		}
		 
		stage('Build')
		{
			agent any
			steps 
			{
				sh('/usr/bin/singularity exec -B /var/lib/jenkins/singularity/cvmfs:/cvmfs -B /gpfs -B /direct -B /afs -B /sphenix /var/lib/jenkins/singularity/cvmfs/sphenix.sdcc.bnl.gov/singularity/rhic_sl7_ext.simg tcsh -f utilities/jenkins/built-test/full-build.sh')
			
			 	script {
			  	build_root_path = pwd();
			 	}
						
				slackSend (color: '#00FF00', message: "sPHENIX build available: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}). Buld available at ${build_root_path}")
			}										
		}
		
		stage('Test')
		{
			parallel {
			
				stage('test-default')
				{
					agent any
					steps 
					{
						//sh('/usr/bin/singularity exec -B /var/lib/jenkins/singularity/cvmfs:/cvmfs -B /gpfs -B /direct -B /afs -B /sphenix /var/lib/jenkins/singularity/cvmfs/sphenix.sdcc.bnl.gov/singularity/rhic_sl7_ext.simg tcsh -f utilities/jenkins/built-test/test-default.sh')
						
		    		build(job: 'test-default',
		    			parameters:
		    			[string(name: 'build_src', value: "${build_root_path}")], 
		    			wait: true, propagate: true)
		   										
		   			copyArtifacts(projectName: 'test-default');
					}				
				}
			
				stage('test-calo-single-qa')
				{
					agent any
					steps 
					{
						
		    		build(job: 'test-calo-single-qa',
		    			parameters:
		    			[string(name: 'build_src', value: "${build_root_path}")], 
		    			wait: true, propagate: true)
		   			
		   			copyArtifacts(projectName: 'test-default');
					}				
				}
				
				
			}// parallel			
		}
		
	}//stages
	
	
	
	post {
		success {
			slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
		}
		failure {
			slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
		}
		unstable {
			slackSend (color: '#FFF000', message: "UNSTABLE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
		}
	}
	
}//pipeline 

