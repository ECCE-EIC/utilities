pipeline 
{
	agent any
    
	stages { 
		stage('Initialize') 
		{
			        
			steps {
				timestamps {
					ansiColor('xterm') {
						
						

						//dir('coresoftware') {
						//	deleteDir()
						//}
						sh('rm -fv *.*')
					
						sh('hostname')
						sh('pwd')
						sh('env')
						sh('ls -lvhc')

						dir('utilities/jenkins/built-test/') {
							
							sh('${singularity_cmd} lsb_release -a')
						
						}
					}
				}
			}
		}

		stage('Git Checkout')
		{
			
			steps 
			{
				timestamps { 
					ansiColor('xterm') {
						
						dir('work')
						{
							
							sh ('pwd')
							sh ('ls -lhv')
						}
						
						
						dir('utilities/doxygen/')
						{
							sh ("rsync -avl ./ ${WORKSPACE}/work/")
							
						}
						
						dir('work')
						{
							
						
							dir('fun4all_coresoftware')
							{
								
								checkout(
									[
										$class: 'GitSCM',
										extensions: [    
											[$class: 'CleanBeforeCheckout'], 
											[$class: 'CleanCheckout'],
											[$class: 'RelativeTargetDirectory', relativeTargetDir: 'blob/master/']										
										],
										userRemoteConfigs: 
										[[
										credentialsId: 'sPHENIX-bot', 
										url: 'https://github.com/eic/fun4all_coresoftware.git',
										refspec: ('+refs/pull/*:refs/remotes/origin/pr/* +refs/heads/master:refs/remotes/origin/master')
										]]
									] //checkout
								)//checkout				
							} // dir
							
							dir('fun4all_tutorials')
							{
								checkout(
									[
										$class: 'GitSCM',
										extensions: [               
											[$class: 'CleanBeforeCheckout'], 
											[$class: 'CleanCheckout'],
											[$class: 'RelativeTargetDirectory', relativeTargetDir: 'blob/master/']										
										],
										userRemoteConfigs: 
										[[
										credentialsId: 'sPHENIX-bot', 
										url: 'https://github.com/eic/fun4all_tutorials.git',
										refspec: ('+refs/pull/*:refs/remotes/origin/pr/* +refs/heads/master:refs/remotes/origin/master')
										]]
									] //checkout
								)//checkout			
							} // dir
						
						} // dir('work')
					}
				}
			}
		}//stage('SCM Checkout')
		
		stage('Doxygen-build')
		{
			
			steps 
			{
				timestamps { 
					ansiColor('xterm') {
						
						dir('work')
						{
							
							sh ('pwd')
							sh ('ls -lhv')
							
							sh ("${singularity_cmd} /opt/sphenix/utils/bin/doxygen Doxyfile >& doxygen.log")						
							
						}
						
					}
				}
			}
		}//stage('SCM Checkout')
		
	}//stages
		
	
	post {
		always{
		  	script {			
	            recordIssues enabledForFailure: true, tool: doxygen(pattern: 'work/doxygen.log')    	
			} // script 
			
		} // always
	}//post
}//pipeline 
